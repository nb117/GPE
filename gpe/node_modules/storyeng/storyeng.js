// Copyright (c) 2017 SkilStak, Inc.

const rl = require('readline').createInterface({
  input: process.stdin,
  output: process.stdout
})

let credits = `
The story engine behind this game was created by ...

           [0;31m        __   .__.__            __          __
           [0;31m  _____|  | _|__|  |   _______/  |______  |  | __
           [0;31m /  ___/  |/ /  |  |  /  ___/\\   __\\__  \\ |  |/ /
           [0;31m \\___ \\|    <|  |  |__\\___ \\  |  |  / __ \\|    <
           [0;31m/____  >__|_ \\__|____/____  > |__| (____  /__|_ \\[1;37m_______[0m
           [0;31m     \\/     \\/            \\/            \\/     \\/[1;37m______/[0m
                                        [1;37mCoding Arts[0m
`

let copyright = `
Copyright (c) 2017 SkilStak, Inc.

Redistribution and use in source and binary forms, with or without modification,
are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, this
   list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation and/or
   other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
`

let parts = {}
let current = ""
let previous = ""

let actions = {}

let data = {
  parts: {},
  current: '',
  previous: '',
  'name': 'friend'
}

let isWindows = process.platform === 'win32'
let isMac = process.platform === 'darwin'
let isLinux = process.platform === 'linux'
let isBSD = process.platform === 'freebsd'
let isPosix = ! isWindows

const path = require('path')
const fs = require('fs')
const os = require('os')

class Cache {
  
  constructor() {
    this.name = '.' + path.basename(__filename)
    this.path = path.join(os.homedir(),this.name)
    this.modpath = path.dirname(process.mainModule.filename)
    this.id = path.basename(this.modpath)
    this.data = path.join(this.path,this.id + '.json')
    this.partspath = path.join(this.modpath, 'parts')
    this.actionspath =path.join(this.modpath, 'actions')
    this.make()
  }

  make() {
    if (!fs.existsSync(this.path)) fs.mkdirSync(this.path)
  }

  save(data) {
    fs.writeFileSync(this.data, JSON.stringify(data))
  }

  load() {
    if (!fs.existsSync(this.data)) return ""
    let text = fs.readFileSync(this.data)
    if (text) {
        return JSON.parse(text)
    }
  }

  remove() {
    fs.unlinkSync(this.data)
  }

}

cache = new Cache() // singleton
const save = () => cache.save(data)
const load = () => cache.load()

const crunch = text => {
  return text.toLowerCase().replace(/[\W_]+/g,'');
}

class Event {
  constructor() {
    this.data = data
  }
}

class InputEvent extends Event {

  constructor(line) {
    super()
    this.line = line.trim()
    this.lower = this.line.toLowerCase()
    this.crunched = crunch(line)
    this.yes = InputEvent.YesSynonyms.indexOf(this.lower) >= 0
    this.no = InputEvent.NoSynonyms.indexOf(this.lower) >= 0
  }

}

InputEvent.YesSynonyms = ['yes','y','yep','yeppers','yeah','uhun','yess',
  'affirmative','of course','obviously']

InputEvent.NoSynonyms = ['no','nope','n','no way','obviously not',
  'of course not','nien','nyet']

let c = {}
c.base03 = c.b03 = c.Base03 = c.B03 = '\x1b[1;30m'
c.base02 = c.b02 = c.Base02 = c.B02 = '\x1b[0;30m'
c.base01 = c.b01 = c.Base01 = c.B01 = '\x1b[1;32m'
c.base00 = c.b00 = c.Base00 = c.B00 = '\x1b[1;33m'
c.base0 = c.b0 = c.Base0 = c.B0 = '\x1b[1;34m'
c.base1 = c.b1 = c.Base1 = c.B1 = '\x1b[1;36m'
c.base2 = c.b2 = c.Base2 = c.B2 = '\x1b[0;37m'
c.base3 = c.b3 = c.Base3 = c.B3 = '\x1b[1;37m'
c.yellow = c.y = c.Yellow = c.Y = '\x1b[0;33m'
c.orange = c.o = c.Orange = c.O = '\x1b[1;31m'
c.red = c.r = c.Red = c.R = '\x1b[0;31m'
c.magenta = c.m = c.Magenta = c.M = '\x1b[0;35m'
c.violet = c.v = c.Violet = c.V = '\x1b[1;35m'
c.blue = c.b = c.Blue = c.B = '\x1b[0;34m'
c.cyan = c.c = c.Cyan = c.C = '\x1b[0;36m'
c.green = c.g = c.Green = c.G = '\x1b[0;32m'
c.reset = c.x = c.Reset = c.X = '\x1b[0m'
c.line = c.l = c.Line = c.L = '\x1b[2K\x1b[G'

// at least attempt clear on non-Posix (even though the colors won't work)
if (process.platform === 'win32') {
  c.screen = c.clear = c.Screen = c.Clear = c.s = c.S  = '\x1B[2J\x1B[0f'
} else {
  c.screen = c.clear = c.Screen = c.Clear = c.s = c.S  = '\x1b[2J\x1b[H'
}
  
// TODO add @color.setter to mod c.p and c.t as side effects
class ThemePrompt {
  constructor() {
    this.text = '--> '
    this.color = c.base3
  }
}

class ThemeInput {
  constructor() {
    this.color = c.yellow
  }
}

class ThemeTell {
  constructor() {
    this.color = c.base0
  }
}

class ThemeMessages {}

class Theme {
  constructor() {
    this.prompt = new ThemePrompt()
    this.input = new ThemeInput()
    this.tell = new ThemeTell()
    this.msgs = new ThemeMessages()
  }
}

let theme = new Theme() // singleton
theme.msgs.nopart = () => `${c.r}I'm sorry. The author has not written the next part yet.${c.t}`
theme.msgs.bye = () => `Sorry to see you go, ${data.name}. See you soon.`
theme.msgs.nostart = () => `It appears the author has not added the required ${c.r}Start${c.t} part.`
theme.msgs.restart = () => `Do you really want to delete your data and restart?`

const clear = () => {
  console.log(c.clear)
}

const tell = what => {
  switch (typeof(what)) {
    case 'function':
      what = what()
    case 'string':
      what = what.trim().replace(/^\s+/mg,'')
      what = `${c.t}${what}${c.x}\n`
      console.log(what)
  }
}

const show = what => {
  console.log(what)
}

const leave = part => {
  if (part.onleave) {
    let e = new Event()
    switch (typeof(part.onleave)) {
      case 'function':
        let rv = part.onleave(e)
        if (rv) tell(rv)
        break
      case 'string':
        tell(part.onleave)
        break
    }
  }
}

const enter = part => {
  if (part.onenter) {
    let e = new Event()
    switch (typeof(part.onenter)) {
      case 'function':
        let rv = part.onenter(e)
        if (rv) tell(rv)
        break
      case 'string':
        tell(part.onenter)
        break
    }
  }
}

const quit = () => {
  tell(theme.msgs.bye)
  save()
  process.exit(0)
}

const actionFor = e => {
  for (let key in actions) {
    if (key[0] !== key[0].toUpperCase()) continue
    if (e.crunched.startsWith(key.toLowerCase())) {
      return actions[key]
    }
  }
}

actions.Data = e => show(data)
actions.Clear = e => clear()
actions.Bye = e => quit()
actions.Restart = e => go('Restart')
actions.Back = e => go(previous)
actions.Copyright = e => show(copyright)
actions.Credits = e => show(credits)

actions.Exit = actions.Bye
actions.Quit = actions.Bye
actions.SoLong = actions.Bye
actions.Adios = actions.Bye
actions.GoodBye = actions.Bye
actions.MakeItStop = actions.Bye

actions.StartOver = actions.Restart
actions.StartOverAgain =  actions.Restart
actions.Respawn =  actions.Restart

actions.Previous = actions.Back
actions.Prev = actions.Back

actions.License = actions.Copyright
actions.Legal = actions.Copyright
actions.Copying = actions.Copyright
actions.CopyLeft =  actions.Copyright

actions.Author = actions.Credits
actions.Authors = actions.Credits
actions.Creator = actions.Credits
actions.Creators = actions.Credits
actions.Attribution = actions.Credits
actions.Developer = actions.Credits
actions.Developers = actions.Credits
actions.Team =  actions.Credits
actions.Credit = actions.Credits

rl.on('line', text => {
  let e = new InputEvent(text)
  if (e.line) {
    action = actionFor(e)
    if (action) {
      switch (typeof(action)) {
        case 'function':
          let rv = action(e)
          if (rv) tell(rv)
          break
        case 'string':
          tell(action)
      }
    } else {
      let part = parts[current]
      if (part.oninput) {
        switch (typeof(part.oninput)){
          case 'function':
            let rv = part.oninput(e)
            if (rv) go(rv)
            break
          case 'string':
            go(part.oninput)
        }
      }
    }
  }
  rl.prompt()
})

const update = () => {
  clear()
  if (previous) {
    let prevpart = parts[previous]
    data.previous = previous
    leave(prevpart)
  }
  let part = parts[current]
  data.current = current
  enter(part)
  rl.prompt()
}

const go = name => {
  if (!parts[name]) {
    tell(theme.msgs.nopart)
    return
  }
  previous = current
  current = name
  save()
  update()
}

// default to warn a Start is needed
parts.Start = {
  onenter: e => {
    tell(theme.msgs.nostart)
    process.exit(1)
  }
}

parts.Restart = {
  onenter: e => theme.msgs.restart,
  oninput: e => {
    if (e.yes) {
      cache.remove()
      process.exit(0)
    }
  }
}

// these add to storyeng namespace directly
const reqall = top => {
  if (!fs.existsSync(top)) return
  let files = fs.readdirSync(top)
  for (let file of files) {
    if (file.endsWith('.js')) {
      let p = path.join(top,file)
      require(p)
    }
  }
}

module.exports = {
    parts, current, previous, Event,
    data, InputEvent, theme, c, actions, actionFor,
    go, tell, show, clear, cache, save, load, quit,
    isWindows, isMac, isLinux, isBSD, isPosix,
    credits, copyright, reqall
}

reqall(`${__dirname}/../../parts`)
reqall(`${__dirname}/../../actions`)

// after imports since author might have overridden
c.p = theme.prompt.color
c.i = theme.input.color
c.t = theme.tell.color

rl.setPrompt(`${c.p}${theme.prompt.text}${c.i}`)

if (!process.env.TESTING) {
  let d = cache.load()
  if (d.current) {
    data = d
    current = data.current
    previous = data.previous
    update()
  } else {
    go('Start')
  }
}